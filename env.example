# ===========================================
# TODO APP CARITAS - ENVIRONMENT VARIABLES
# ===========================================
# Kopieren Sie diese Datei zu .env und passen Sie die Werte an

# ===========================================
# DATENBANK-KONFIGURATION
# ===========================================

# Supabase PostgreSQL Connection String
# Format: postgresql://postgres:[PASSWORD]@db.[PROJECT_REF].supabase.co:5432/postgres
# Erhalten Sie diese URL aus Ihrem Supabase Dashboard → Settings → Database
DATABASE_URL="postgresql://postgres:your-password@db.your-project-ref.supabase.co:5432/postgres"

# ===========================================
# NEXT-AUTH KONFIGURATION
# ===========================================

# URL der Anwendung (für lokale Entwicklung)
NEXTAUTH_URL="http://localhost:3000"

# Geheimer Schlüssel für JWT-Signierung (mindestens 32 Zeichen)
# Generieren Sie einen sicheren Schlüssel mit: openssl rand -base64 32
NEXTAUTH_SECRET="your-nextauth-secret-key-here-minimum-32-characters"

# ===========================================
# APP-KONFIGURATION
# ===========================================

# Port für lokale Entwicklung (optional, Standard: 3000)
PORT=3000

# ===========================================
# SICHERHEIT
# ===========================================

# Anzahl der bcrypt Salt-Runden für Passwort-Hashing
BCRYPT_SALT_ROUNDS=10

# ===========================================
# N8N WEBHOOK-INTEGRATION (OPTIONAL)
# ===========================================

# Token für eingehende Webhooks von n8n
# Muss mit dem Token in Ihrem n8n-Workflow übereinstimmen
INBOUND_WEBHOOK_TOKEN="your-secure-webhook-token"

# Mapping von Planka-Listen zu App-Status (JSON-Format)
PLANKA_LIST_TO_STATUS='{"Offen":"offen","In Bearbeitung":"in_bearbeitung","Erledigt":"erledigt"}'

# URL für ausgehende Webhooks an n8n
N8N_OUTBOUND_WEBHOOK_URL="https://your-n8n-instance.com/webhook/todo-app"

# Token für ausgehende Webhooks an n8n
N8N_OUTBOUND_TOKEN="your-n8n-webhook-token"

# ===========================================
# PRODUKTIONS-KONFIGURATION (VERCEL)
# ===========================================
# Diese Werte werden in Vercel Environment Variables gesetzt:

# Für Produktion:
# NEXTAUTH_URL="https://your-app-name.vercel.app"
# DATABASE_URL="postgresql://postgres:[PASSWORD]@db.[PROJECT_REF].supabase.co:5432/postgres"
# NEXTAUTH_SECRET="generated-secret-key"

# ===========================================
# LOKALE ENTWICKLUNG
# ===========================================
# Für lokale Entwicklung mit Supabase:

# 1. Erstellen Sie ein Supabase-Projekt
# 2. Kopieren Sie die Connection String aus Settings → Database
# 3. Generieren Sie einen NEXTAUTH_SECRET
# 4. Starten Sie die App mit: npm run dev

# ===========================================
# DEPLOYMENT CHECKLIST
# ===========================================
# Vor dem Deployment auf Vercel:

# ✅ Supabase-Projekt erstellt
# ✅ DATABASE_URL aus Supabase kopiert
# ✅ NEXTAUTH_SECRET generiert (openssl rand -base64 32)
# ✅ Vercel-Projekt erstellt und GitHub-Repo verknüpft
# ✅ Environment Variables in Vercel gesetzt:
#    - DATABASE_URL
#    - NEXTAUTH_URL (wird automatisch von Vercel gesetzt)
#    - NEXTAUTH_SECRET
# ✅ Optional: Webhook-Tokens für n8n-Integration
